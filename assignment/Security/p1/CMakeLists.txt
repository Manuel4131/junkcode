cmake_minimum_required(VERSION 2.8)

project(Security_1)

add_definitions("-D_UNICODE")

set(NETWORK_SOURCES "src/config.h" "src/tcpserver.h" "src/tcpsocket.h")
if(WIN32)
	list(APPEND NETWORK_SOURCES "src/tcpserver_win32.c" "src/tcpsocket_win32.h" "src/tcpsocket_win32.c" "src/network_win32.h" "src/network_win32.c")
else()
	list(APPEND NETWORK_SOURCES "src/tcpserver_linux.c" "src/tcpsocket_linux.h" "src/tcpsocket_linux.c")
endif()
add_library(network SHARED ${NETWORK_SOURCES})
set_target_properties(network PROPERTIES COMPILE_FLAGS "-DNETWORK_LIBRARY")
if(WIN32)
	target_link_libraries(network "Ws2_32")
endif()

set(SERVER_SOURCES "src/server.c")
add_executable(server ${SERVER_SOURCES})
add_dependencies(server network)
target_link_libraries(server network)

set(CLIENT_SOURCES "src/client.c" "src/utility.h")
if("${CMAKE_SIZEOF_VOID_P}" EQUAL "8")
	if(WIN32)
		list(APPEND CLIENT_SOURCES "src/utility_x64_win64.c")
	else()
		list(APPEND CLIENT_SOURCES "src/utility_x64_linux.c")
	endif()
elseif("${CMAKE_SIZEOF_VOID_P}" EQUAL "4")
	list(APPEND CLIENT_SOURCES "src/utility_x86.c")
endif()
if(WIN32)
	list(APPEND CLIENT_SOURCES "src/utility_win32.c")
else()
	list(APPEND CLIENT_SOURCES "src/utility_linux.c")
endif()
add_executable(client ${CLIENT_SOURCES})
add_dependencies(client network)
target_link_libraries(client network)
